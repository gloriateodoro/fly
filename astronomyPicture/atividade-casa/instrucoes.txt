Atividade de Casa: Explorador de Gatinhos Aleat√≥rios üê± (Usando uma API P√∫blica)
Objetivo: Praticar a integra√ß√£o de HTML, CSS e JavaScript para fazer requisi√ß√µes a uma API p√∫blica, exibir os dados retornados e manipular o DOM.

APIs P√∫blicas Sugeridas:

The Cat API: https://api.thecatapi.com/v1/images/search (simples, n√£o requer chave para uso b√°sico).

Dog API: https://dog.ceo/api/breeds/image/random (similar √† The Cat API, pode ser uma alternativa se preferir c√£es).

(Opcional: Para um desafio extra, se quiser explorar mais, a PokeAPI ou a Star Wars API s√£o √≥timas, mas um pouco mais complexas para a primeira API call.)

Instru√ß√µes:
Dentro dessa pasta crie os seguintes arquivos:

index.html (estrutura da p√°gina)

style.css (estiliza√ß√£o)

script.js (l√≥gica JavaScript)

Parte 1: Estrutura HTML (index.html)
Crie a seguinte estrutura HTML b√°sica:

Um t√≠tulo principal (<h1> ou <h2>).

Um par√°grafo de introdu√ß√£o.

Um bot√£o (<button>) com o texto "Gerar Novo Gatinho" (ou "Novo C√£o"). D√™ a ele um id (ex: id="gerarGatinhoBtn") para poder acess√°-lo via JavaScript.

Uma √°rea onde a imagem do gatinho ser√° exibida. Pode ser uma tag <img> vazia com um id (ex: id="imagemGatinho") e talvez um alt vazio.

Opcional: Um par√°grafo para exibir alguma informa√ß√£o extra do gatinho, se a API fornecer (ex: id="infoGatinho").

N√£o se esque√ßa de linkar seu style.css no <head> e seu script.js antes do fechamento do </body>.

HTML
(tente n√£o olhar agora, apenas depois de tentar hahaha)

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explorador de Gatinhos üêæ</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Meu Explorador de Gatinhos!</h1>
        <p>Clique no bot√£o para ver um gatinho aleat√≥rio.</p>
        <button id="gerarGatinhoBtn">Gerar Novo Gatinho</button>
        <div class="imagem-container">
            <img id="imagemGatinho" src="" alt="Imagem de um gatinho">
            <p id="infoGatinho"></p>
        </div>
        <p class="loading-message" id="loadingMessage">Carregando gatinho...</p>
    </div>
    <script src="script.js"></script>
</body>
</html>

Parte 2: Estiliza√ß√£o B√°sica (style.css)
Adicione alguns estilos b√°sicos para deixar a p√°gina apresent√°vel. N√£o precisa ser um super design, apenas o suficiente para organizar os elementos.

Centralize o conte√∫do.

Estilize o bot√£o.

D√™ uma borda √† imagem ou um tamanho m√°ximo.

Esconda a mensagem de carregamento por padr√£o (display: none;).

CSS
(tente n√£o olhar agora, apenas depois de tentar hahaha)

body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: #f0f0f0;
    margin: 0;
}

.container {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
    max-width: 500px;
    width: 90%;
}

h1 {
    color: #333;
}

button {
    background-color: #7B68EE; /* Cor roxa */
    color: white;
    padding: 12px 25px;
    border: none;
    border-radius: 5px;
    font-size: 1.1em;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-bottom: 20px;
}

button:hover {
    background-color: #6A5ACD; /* Roxo mais escuro */
}

.imagem-container {
    margin-top: 20px;
    min-height: 200px; /* Garante um espa√ßo m√≠nimo */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

#imagemGatinho {
    max-width: 100%;
    height: auto;
    max-height: 400px; /* Limita a altura para imagens muito grandes */
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

#infoGatinho {
    margin-top: 10px;
    font-style: italic;
    color: #555;
}

.loading-message {
    color: #888;
    margin-top: 15px;
    display: none; /* Escondido por padr√£o */
}
Parte 3: L√≥gica JavaScript (script.js)
Esta √© a parte principal!

Obter Refer√™ncias do DOM:

Pegue o bot√£o (gerarGatinhoBtn).

Pegue a tag <img> (imagemGatinho).

Pegue o par√°grafo de informa√ß√£o (infoGatinho).

Pegue a mensagem de carregamento (loadingMessage).

Fun√ß√£o carregarGatinho():
Crie uma fun√ß√£o ass√≠ncrona (usando async/await ou .then()) que far√° a chamada √† API.

Mostrar Mensagem de Carregamento: Antes de iniciar a requisi√ß√£o, mostre a mensagem de carregamento (loadingMessage.style.display = 'block';) e, opcionalmente, esconda a imagem e as informa√ß√µes antigas.

Fazer Requisi√ß√£o fetch: Use fetch('https://api.thecatapi.com/v1/images/search') para obter os dados.

Processar Resposta:

Converta a resposta para JSON (.json()).

A The Cat API retorna um array de objetos, onde cada objeto tem uma propriedade url com o link da imagem. Voc√™ precisar√° acessar o primeiro elemento do array e sua url (ex: data[0].url).

Exibir Imagem: Defina o src da tag <img> para a URL da imagem do gatinho.

Opcional: Exibir Informa√ß√£o: Se a API retornar mais dados (como id ou width/height), exiba no par√°grafo infoGatinho.

Esconder Mensagem de Carregamento: Ap√≥s carregar a imagem, esconda a mensagem de carregamento.

Tratamento de Erros: Use um bloco try...catch (se usar async/await) ou .catch() (se usar .then()) para lidar com poss√≠veis erros na requisi√ß√£o (ex: falha de rede, API fora do ar). Exiba uma mensagem de erro no console ou na p√°gina.

Adicionar Event Listener:

Adicione um event listener de click ao bot√£o. Quando o bot√£o for clicado, ele deve chamar a fun√ß√£o carregarGatinho().

Chamar ao Carregar a P√°gina:

Chame a fun√ß√£o carregarGatinho() uma vez quando a p√°gina carregar (fora de qualquer outra fun√ß√£o ou listener) para que um gatinho apare√ßa imediatamente.

JavaScript
(tente n√£o olhar agora, apenas depois de tentar hahaha)

// 1. Obter Refer√™ncias do DOM
const gerarGatinhoBtn = document.getElementById('gerarGatinhoBtn');
const imagemGatinho = document.getElementById('imagemGatinho');
const infoGatinho = document.getElementById('infoGatinho');
const loadingMessage = document.getElementById('loadingMessage');

// Fun√ß√£o ass√≠ncrona para carregar a imagem do gatinho
async function carregarGatinho() {
    // 2. Mostrar Mensagem de Carregamento
    loadingMessage.style.display = 'block'; // Mostra a mensagem
    imagemGatinho.src = ''; // Limpa a imagem anterior
    infoGatinho.textContent = ''; // Limpa a informa√ß√£o anterior

    try {
        // 3. Fazer Requisi√ß√£o fetch
        const response = await fetch('https://api.thecatapi.com/v1/images/search');

        // Verificar se a resposta foi bem-sucedida (status 200 OK)
        if (!response.ok) {
            throw new Error(`Erro HTTP! Status: ${response.status}`);
        }

        // Processar Resposta
        const data = await response.json(); // Converte a resposta para JSON
        console.log('Dados da API:', data); // √ötil para depurar e ver o que a API retorna

        // The Cat API retorna um array de objetos, pegamos o primeiro elemento
        if (data && data.length > 0 && data[0].url) {
            // Exibir Imagem
            imagemGatinho.src = data[0].url;
            imagemGatinho.alt = "Um gatinho fofo";

            // Opcional: Exibir Informa√ß√£o extra
            infoGatinho.textContent = `ID: ${data[0].id} | Largura: ${data[0].width}px | Altura: ${data[0].height}px`;
        } else {
            infoGatinho.textContent = "Nenhuma imagem de gatinho encontrada.";
        }

    } catch (error) {
        // Tratamento de Erros
        console.error("Erro ao carregar o gatinho:", error);
        imagemGatinho.src = "https://via.placeholder.com/300?text=Erro"; // Imagem de erro
        imagemGatinho.alt = "Erro ao carregar imagem";
        infoGatinho.textContent = "Ops! N√£o foi poss√≠vel carregar um gatinho. Tente novamente mais tarde.";
    } finally {
        // 4. Esconder Mensagem de Carregamento (sempre executa, com ou sem erro)
        loadingMessage.style.display = 'none';
    }
}

// 5. Adicionar Event Listener ao bot√£o
gerarGatinhoBtn.addEventListener('click', carregarGatinho);

// 6. Chamar ao Carregar a P√°gina para exibir um gatinho inicial
carregarGatinho();
Entrega:
Pe√ßa para as alunas:

Submeterem os tr√™s arquivos (index.html, style.css, script.js).

Ou um link para um reposit√≥rio no GitHub