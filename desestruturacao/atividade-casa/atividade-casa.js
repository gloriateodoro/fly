/* Atividade de Casa: Gest√£o de Invent√°rio de Produtos da Lanchonete üçîü•§üç©
Objetivo: Praticar a desestrutura√ß√£o, o operador spread e o operador rest em um cen√°rio real de gerenciamento de dados de produtos.

Contexto: Voc√™ foi contratada para ajudar a "Lanchonete da Dona Marieta" a organizar o invent√°rio de seus produtos. Cada produto tem informa√ß√µes b√°sicas, mas tamb√©m pode ter caracter√≠sticas adicionais ou varia√ß√µes.

Instru√ß√µes:
Crie um arquivo index.html (apenas com um script.js linkado) e um arquivo script.js. Todo o c√≥digo JavaScript deve ser escrito no script.js.

/* Parte 1: Cadastrando Produtos (Desestrutura√ß√£o e Spread)

Objeto Base de Produto:
Defina um array inicial de produtos (no seu script.js) usando objetos. Comece com 3-4 produtos. Cada produto deve ter as seguintes propriedades: id, nome, preco, quantidadeEmEstoque.
Exemplo:

JavaScript:
const inventarioProdutos = [
    { id: 1, nome: "Hamburguer Cl√°ssico", preco: 15.00, quantidadeEmEstoque: 50 },
    { id: 2, nome: "Batata Frita M√©dia", preco: 8.00, quantidadeEmEstoque: 100 },
    // ... adicione mais alguns
];

Fun√ß√£o adicionarProduto:
Crie uma fun√ß√£o chamada adicionarProduto que aceite um objeto como argumento.
Esta fun√ß√£o deve:

- Desestruturar o objeto recebido para extrair id, nome, preco e quantidadeEmEstoque diretamente nos par√¢metros da fun√ß√£o (ou logo no in√≠cio da fun√ß√£o).

- Criar um novo objeto de produto (certificando-se de que ele tem todas as propriedades necess√°rias, mesmo que algumas n√£o venham na desestrutura√ß√£o inicial, usando valores padr√£o se for o caso).

- Usar o operador spread para adicionar este novo produto ao array inventarioProdutos de forma imut√°vel (criando um novo array inventarioProdutos a cada adi√ß√£o, sem modificar o original diretamente).

Exemplo de uso esperado:

JavaScript:

// Adicionando um novo produto
inventarioProdutos = adicionarProduto(inventarioProdutos, {
    id: 3,
    nome: "Refrigerante Lata",
    preco: 6.00,
    quantidadeEmEstoque: 75
});

// Adicionando um produto com propriedades extras (ser√° ignorado pela fun√ß√£o inicial, mas preparado para Parte 3)
inventarioProdutos = adicionarProduto(inventarioProdutos, {
    id: 4,
    nome: "Milkshake Morango",
    preco: 12.00,
    quantidadeEmEstoque: 30,
    sabor: "Morango",
    tamanho: "Grande"
});
Dica: Pense em como passar o inventarioProdutos atual para a fun√ß√£o e como retornar o novo array.


/* Parte 2: Listando e Atualizando Produtos (Template Literals e Spread)
Fun√ß√£o listarProdutos:
Crie uma fun√ß√£o listarProdutos que recebe o array inventarioProdutos como argumento.
Esta fun√ß√£o deve:

- Iterar sobre o array de produtos.

- Para cada produto, usar template literals para criar uma string formatada que mostre ID: [id], Nome: [nome], Pre√ßo: R$[preco], Estoque: [quantidadeEmEstoque].

- Exibir essas strings no console.

Exemplo de uso esperado:

JavaScript

listarProdutos(inventarioProdutos);

Sa√≠da no console (exemplo):
ID: 1, Nome: Hamburguer Cl√°ssico, Pre√ßo: R$15.00, Estoque: 50
ID: 2, Nome: Batata Frita M√©dia, Pre√ßo: R$8.00, Estoque: 100
ID: 3, Nome: Refrigerante Lata, Pre√ßo: R$6.00, Estoque: 75
ID: 4, Nome: Milkshake Morango, Pre√ßo: R$12.00, Estoque: 30


Fun√ß√£o atualizarPreco:
Crie uma fun√ß√£o atualizarPreco que aceite o array inventarioProdutos, um id do produto e o novoPreco.
Esta fun√ß√£o deve:

- Usar o m√©todo map do array para criar um novo array de produtos.

- Dentro do map, se o id do produto atual for o id que voc√™ quer atualizar, use o operador spread para criar uma nova c√≥pia do objeto produto e apenas atualizar a propriedade preco.

- Se n√£o for o produto certo, retorne o produto original sem modifica√ß√µes.

- Retornar o novo array de invent√°rio.

Exemplo de uso esperado:

JavaScript

inventarioProdutos = atualizarPreco(inventarioProdutos, 1, 16.50); // Aumenta o pre√ßo do Hamburguer Cl√°ssico
listarProdutos(inventarioProdutos); // Verifique no console se o pre√ßo mudou


/* Parte 3: Caracter√≠sticas Vari√°veis do Produto (Operador Rest)
Modificar adicionarProduto (Desafio Extra):
Adapte a fun√ß√£o adicionarProduto (criada na Parte 1) para que ela aceite:

Um objeto com as propriedades b√°sicas (id, nome, preco, quantidadeEmEstoque).

E, usando o operador rest, colete quaisquer outras propriedades adicionais que venham no objeto original e as adicione como um objeto separado dentro do seu objeto de produto (ex: detalhesAdicionais: { sabor: "Morango", tamanho: "Grande" }).

Dica: Pense em como desestruturar o objeto de entrada para pegar as propriedades b√°sicas e o rest das outras propriedades.

Exemplo de uso esperado com a fun√ß√£o modificada:

JavaScript

inventarioProdutos = adicionarProduto(inventarioProdutos, {
    id: 5,
    nome: "Pizza Pequena",
    preco: 25.00,
    quantidadeEmEstoque: 15,
    sabor: "Calabresa",
    borda: "Recheada",
    vegetariana: false
});

console.log(inventarioProdutos[4]); // O produto com id 5
/*
Sa√≠da esperada para o produto com id 5:
{
  id: 5,
  nome: "Pizza Pequena",
  preco: 25.00,
  quantidadeEmEstoque: 15,
  detalhesAdicionais: {
    sabor: "Calabresa",
    borda: "Recheada",
    vegetariana: false
  }
}

Modificar listarProdutos (Desafio Extra):
Adapte a fun√ß√£o listarProdutos para que, se um produto tiver detalhesAdicionais, ela tamb√©m os liste no console, usando template literals para formatar essas informa√ß√µes de forma leg√≠vel.

Exemplo de sa√≠da com detalhes adicionais:

ID: 4, Nome: Milkshake Morango, Pre√ßo: R$12.00, Estoque: 30
  Detalhes: Sabor: Morango, Tamanho: Grande
ID: 5, Nome: Pizza Pequena, Pre√ßo: R$25.00, Estoque: 15
  Detalhes: Sabor: Calabresa, Borda: Recheada, Vegetariana: false
*/

/* Entrega:
OBS: Enviar o arquivo script.js (ou um link para um reposit√≥rio no GitHub) com as solu√ß√µes. */